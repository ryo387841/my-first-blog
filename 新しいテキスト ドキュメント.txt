仮想環境の作成
python -m venv 仮想環境名

仮想環境へ入る
$仮想環境名\Scripts\activate

pipのアップグレード
python -m pip install --upgrade pip

djangoをインストール
pip install django

インストールしたライブラリを記録する
pip freeze > requirements.txt

djangoのプロジェクト作成
django-admin.exe startproject プロジェクト名 .
⇒最後のピリオドは現在のディレクトリにという意味

settings.pyの編集
TIME_ZONE = 'Asia/Tokyo'
LANGUAGE_CODE = 'ja'
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
⇒静的ファイルのパスを追加

DEBUG=TRUEの時は、デプロイするサイトのホスト名を入れる必要がある。
(ワイルドカード(*)も可能だが、ポイズンキャッシュニング対策のため，非推奨）
ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']

データベースのセットアップ(デフォルトはsqlite3)
python manage.py migrate

Webサーバーの起動(settings.pyでDEBUG=Falseにすると出来ない）
python manage.py runserver

アプリの作成
python manage.py startapp アプリ名

作成したアプリをdjangoに教える
mysite/settings.pyのINSTALLED_APPSの部分にアプリ名を追

アプリのモデルを作成する(オブジェクトの定義)
アプリ名/models.pyを開き定義。
##########################################################################
from django.utils import timezone


class Post(models.Model):#モデルの定義
#classはオブジェクトであるということ
#Postはモデルの名前←大文字で開始、特殊文字・空白は禁止
#models.ModelはポストがDjango Modelだという意味。Djangoがデータベースで保存すべきものだとわかるように
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    title = models.CharField(max_length=200)
    text = models.TextField()
    created_date = models.DateTimeField(
            default=timezone.now)
    published_date = models.DateTimeField(
            blank=True, null=True)

    def publish(self):#名前に意味はない
        self.published_date = timezone.now()
        self.save()

    def __str__(self):
        return self.title
##########################################################################

models.CharField - 文字数が制限されたテキストを定義するフィールド
models.TextField - これは制限無しの長いテキスト用
models.DateTimeField - 日付と時間のフィールド
models.ForeignKey - 他のモデルへのリンク

その他は下記URLを参照
https://docs.djangoproject.com/ja/2.0/ref/models/fields/#field-types


モデルに変更があったことをDjangoに伝える
python manage.py makemigrations アプリ名

Djangoが用意した移行ファイルをデータベースに追加
python manage.py migrate blog

作成したモデルを追加・編集・削除するためにDjango Adminを使う
アプリ名/admin.pyを編集

from .models import Post#先ほどのclass名
admin.site.register(Post)

python manage.py runserverでサーバーを起動し、http://127.0.0.1:8000/admin/にアクセス

ログインするためにsuperuserを追加
python manage.py createsuperuser

Django Adminについて詳しく知りたい場合
https://docs.djangoproject.com/ja/2.0/ref/contrib/admin/

--デプロイ--
Gitリポジトリを始める
claimyフォルダにいることを確認。

$ git init
$ git config --global user.name "ユーザー名"
$ git config --global user.email you@example.com

Gitに無視してほしいファイルの指定
claimyフォルダ内に.ignoreファイルを作成。
sqlite3を追加しておくことで、テストで作成したデータはローカルのものとなり、
本番環境への影響を無視して作成できる。
##############################
*.pyc
*~
__pycache__
myvenv
db.sqlite3
/static
.DS_Store
##############################

git addを仕様する前や、変更内容を忘れたときは、下記で変更内容を確認
$ git status

変更内容を保存
$ git add --all .
$ git commit -m "My Django Girls app, first commit"

--GitHubにコードをプッシュ--
リポジトリの作成。
"READMEで初期化する"チェックボックスをオフのまま
.gitignoreオプションを空白にして（手動で行っています）
ライセンスをNoneのままにしておく

コンピューター上のリポジトリをGitHub上のリポジトリに結び付ける

$ git remote add origin https://github.com/GitHubのユーザー名/my-first-blog.git
クローンURL：https://github.com/ryo387841/my-first-blog.git
$ git push -u origin master
⇒ユーザー名とパスワードを入力

PythonAnywhereでサイトを設定
Bashを起動（コマンドラインと同じようなもの)


PythonAnywhereにWebアプリケーションをデプロイするには、
コードをGitHubからプルし、PythonAnywhereがそれを認識してWebアプリケーションのサーバを動かし始めるように設定する
手動でもできるが、すべてやってくれるヘルパーツールがある
$ pip3.6 install --user pythonanywhere←Bashで実行

GitHub からアプリを自動的に構成するためのヘルパーを実行
$ pa_autoconfigure_django.py https://github.com/ユーザー名/my-first-blog.git --nuke

--下記を自動で行ってくれている--
最後に--nukeをつけたらエラーを回避できた
・GitHubからコードをダウンロードする
・PythonAnywhere上にvirtualenvを作成する。ちょうどあなたのPC上のように
・一部のデプロイメント設定で設定ファイルを更新する
・manage.py migrateコマンドを使ってPythonAnywhere上のデータベースをセットアップする
・静的ファイルの設定（これについては後で学習します）
APIを通じてPythonAnywhereがあなたのWebアプリケーションを提供するように設定する


データベースは別のため、superuserをもう一度作成する。
 $ python manage.py createsuperuser
基本的にローカルと同じが望ましい

pythonanywhereのWebページからリンクを取得すると自分のサイトが確認できる

実際に運用する際には、下記サイトでセキュリティのチェック
https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

DjangoではURLconf(URL設定)でビューとリスエストされたURLを照合

mysite/urls.pyを確認
三重クオート（ ''' や """ ）で囲まれた行は、docstringとよばれるコメント行
'http://127.0.0.1:8000/' をブログの入口ページにして、投稿したブログポストのリストを表示するようにする
簡潔なままにしておきたいため、blogアプリからurlをインポートするだけ
##########################################
from django.urls import path, include
from django.contrib import admin

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]
##########################################

blogディレクトリの下にurls.pyというファイルを作成
#################################################
from django.urls import path
from . import views
urlpatterns = [
    path('', views.post_list, name='post_list'),
]
#################################################
Djangoのpath関数とblogアプリ内のすべてのビューをインポート
post_listという名前のビューをルートURLに割り当て
このURLパターンは空の文字列に一致し、URLのドメインは無視
⇒'http://127.0.0.1:8000/'にアクセスすると、views.post_listが正しいとDjangoに伝える
name='post_list'はビューを識別するために使われるURLの名前

ビューがないため、エラーが出る。

--ビューの作成--
ビューとは、
・アプリのロジックを書くところ
・モデルに情報を要求し、テンプレートに渡す
・ビューはただの関数で、アプリ名/views.pyに書く
##########################################################
from django.shortcuts import render
def post_list(request):
    return render(request, 'blog/post_list.html', {})
##########################################################
blog/post_list.htmlテンプレートを表示する (組み立てる) render 関数を return

templateを作成する。
blog/templates/blogにpost_list.htmlを作成
blogが2度出ているのは、後からの作業を楽にするため
######################
<html>
    <head>
        <title>Django Girls blog</title>
    </head>
    <body>
        <div>
            <h1><a href="/">Django Girls Blog</a></h1>
        </div>

        <div>
            <p>published: 14.06.2014, 12:14</p>
            <h2><a href="">My first post</a></h2>
            <p>Aenean eu leo quam. こんにちは！ よろしくお願いします！ </p>
        </div>

        <div>
            <p>公開日: 2014/06/14, 12:14</p>
            <h2><a href="">2番目の投稿</a></h2>
            <p> こんにちは！ よろしくお願いします！ </p>
        </div>
    </body>
</html>
######################
htmlファイルにコード追加

最初の div 要素には、私たちのブログのタイトルが含まれており、見出しとリンクです。
その他の２つのdiv要素には、このブログにポストされた記事が公開日とともに記載されています。
h2はクリック可能な記事のタイトルです。２つのp(段落) は、１つが日付で、１つがブログにポストされた記事です。

--ここまでの内容を一度デプロイしてみる--
変更したファイルの確認
$ git status

gitに対してディレクトリ内の変更を反映させるように指示
$ git add --all .
⇒--allがあると削除したかどうかも判定
.で自分が今いるディレクトリ

アップロードするファイルの確認（アップロードされるファイルはすべて緑）
$ git status

どこを変更したか履歴に残すようにする
$ git commit -m "Changed the HTML for the site."

gitにアップロードする
$ git push

新しいコードをPythonAnywhereにpull
cd ~/ユーザー名.pythonanywhere.com
$ git pull

自分のコードがダウンロードされたことを確認
⇒「Files」ページ を押して、自分のコードをPythonAnywhereの中で見てみましょう
（コンソールページのメニューボタンから他のPythonAnywhereページにアクセスできます
最後に、「Web」ページを押して、自分のアプリのReloadを押します。←サーバーを再起動

下記URLから自分のページを確認すると反映されている
http://ryo387841.pythonanywhere.com/

--クエリセット--
pythonをインタラクティブモードで起動
python manage.py shell

データを表示させてみる
from blog.models import Post
Post.objects.all()

データを登録してみる
Post.objects.create(author=me, title='Sample title', text='Test')
⇒authorにmeを渡しているが、Userモデルのインスタンスでないといけない
⇒author='vw715'などにしてもダメ。

特定条件の抽出
Post.objects.filter(author=me)
authorがmeのものだけを抽出

Post.objects.filter(title__contains='title')
titleコンテンツにtitleという単語が含まれているものだけを抽出
アンダーバー2個でつなげているのは照合タイプの指定

公開済みのpostを表示(published_dateが現在よりも前のもの)
from django.utils import timezone
Post.objects.filter(published_date__lte=timezone.now())

postを公開するには
post = Post.objects.get(title="Sample title")
post.publish()

プロンプトを閉じる
exit()

DBの内容をhtmlに反映
view.pyにmodelをインポート（モデルの名前を指定）
from .models import Post
⇒.はカレントディレクトリ、もしくはカレントアプリ

views.pyの関数内にクエリセットを追加
posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')

returnのrenderに値を渡す
{}の中に'posts':posts

djangoテンプレートで変数を表示するには、下記のように{{}}で囲む
{{posts}}だと、オブジェクトのリストと認識されるため、下記のようにする。

{% for post in posts %}
    {{ post }}
{% endfor %}


{{ post.text|linebreaksbr }}
linebreakerは、テキスト中の改行を段落に変えるフィルタに通す

一旦デプロイする。

（コマンドライン）
git status

git add --all .

git status

git commit -m "Modified templates to display posts from database."

git push

（pythonanywhereのBashコンソール）
cd $USER.pythonanywhere.com

git pull
